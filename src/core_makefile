#----------------------------
# Makefile
#----------------------------
CLEANUP       ?= YES
#----------------------------

VERSION := 8.0

#----------------------------
# try not to edit anything below these lines unless you know what you are doing
#----------------------------

#----------------------------

# define some common makefile things
empty :=
space := $(empty) $(empty)
comma := $(empty),$(empty)

TARGET ?= $(NAME)
ICONPNG ?= $(ICON)

BSSHEAP_LOW  := D031F6
BSSHEAP_HIGH := D13FD6
STACK_HIGH   := D1A87E
INIT_LOC     := D1A87F

ifeq ($(OS),Windows_NT)
SHELL     := cmd.exe
CURDIR    := $(shell cmd /c for %%I in ("$(CURDIR)") do @echo %%~sI)
NATIVEPATH = $(subst /,\,$(1))
WINPATH    = $(NATIVEPATH)
WINRELPATH = $(subst /,\,$(1))
WINCHKDIR  = if not exist
RM         = del /q /f 2>nul
CEDEV     ?= $(call NATIVEPATH,$(realpath ..\..))
BIN       ?= $(call NATIVEPATH,$(CEDEV)/bin)
AS         = $(call NATIVEPATH,$(BIN)/fasmg.exe)
LD         = $(call NATIVEPATH,$(BIN)/fasmg.exe)
CC         = $(call NATIVEPATH,$(BIN)/ez80cc.exe)
CV         = $(call NATIVEPATH,$(BIN)/convhex.exe)
PG         = $(call NATIVEPATH,$(BIN)/convpng.exe)
CD         = cd
CP         = copy /y
NULL       = >nul 2>&1
RMDIR      = rmdir /s /q
MKDIR      = mkdir
else
NATIVEPATH = $(subst \,/,$(1))
WINPATH    = $(subst \,\\,$(shell winepath --windows $(1)))
WINRELPATH = $(subst /,\,$(1))
RM         = rm -f
CEDEV     ?= $(call NATIVEPATH,$(realpath ..\..))
BIN       ?= $(call NATIVEPATH,$(CEDEV)/bin)
CC         = $(call NATIVEPATH,wine $(BIN)/ez80cc.exe)
AS         = $(call NATIVEPATH,$(BIN)/fasmg)
LD         = $(call NATIVEPATH,$(BIN)/fasmg)
CV         = $(call NATIVEPATH,$(BIN)/convhex)
PG         = $(call NATIVEPATH,$(BIN)/convpng)
CD         = cd
CP         = cp
RMDIR      = rm -rf
MKDIR      = mkdir -p
endif

# generate default names
TARGETBIN     := $(TARGET).bin
TARGETMAP     := $(TARGET).map
TARGETTYPE    := $(TARGET).8xp
ICON_ASM      := iconc.src

# init entry
ENTRY         := _init, __findlibload

# find all the directories in the source input
ALLDIRS       := $(sort $(dir $(wildcard $(SRCDIR)/*/)))

# find all of the available C, H and ASM files (Remember, you can create C <-> assembly routines easily this way)
CSOURCES      := $(call NATIVEPATH,$(foreach dir,$(ALLDIRS),$(wildcard $(dir)*.c)))
CPPSOURCES    := $(call NATIVEPATH,$(foreach dir,$(ALLDIRS),$(wildcard $(dir)*.cpp)))
USERHEADERS   := $(call NATIVEPATH,$(foreach dir,$(ALLDIRS),$(wildcard $(dir)*.h)))
USERHEADERS   += $(call NATIVEPATH,$(foreach dir,$(ALLDIRS),$(wildcard $(dir)*.hpp)))
ASMSOURCES    := $(call NATIVEPATH,$(foreach dir,$(ALLDIRS),$(wildcard $(dir)*.asm)))

# figure out what the names of the sources will become once made into objects
OBJECTS       += $(addprefix $(OBJDIR)/,$(notdir $(CSOURCES:%.c=%.src)))

# objects for linking
LINK_FILES    := $(ASMSOURCES)
LINK_FILES    += $(wildcard $(CEDEV)/lib/*.src)
LINK_FILES    += $(wildcard $(CEDEV)/lib/shared/*.src)
LINK_LIBLOAD  := $(wildcard $(CEDEV)/lib/libload/*.asm)

# check if there is an icon present that we can convert; if so, generate a recipe to build it properly
ifneq ("$(wildcard $(ICONPNG))","")
ICON_CONV  := $(PG) -c $(ICONPNG)$(comma)$(DESCRIPTION) && \
              $(CP) $(ICON_ASM) $(OBJDIR) $(NULL) && \
              $(RM) $(ICON_ASM) $(NULL)
LINK_FILES += $(call NATIVEPATH,$(OBJDIR)/$(ICON_ASM))
ENTRY      += $(comma)$(space)__program_icon
endif

# determine if output should be archived or compressed
ifeq ($(ARCHIVED),YES)
CVFLAGS := -a
endif
ifeq ($(COMPRESSED),YES)
CVFLAGS += -x
endif
ifeq ($(CLEANUP),YES)
else
endif

# choose static or linked flash functions
ifeq ($(USE_FLASH_FUNCTIONS),YES)
LINK_FILES += $(wildcard $(CEDEV)/lib/linked/*.src)
else
LINK_FILES += $(wildcard $(CEDEV)/lib/static/*.src)
endif

# define the nesassary headers, along with any the user may have defined, where modification should just trigger a build
HEADERS :=$(subst $(space),;,$(call WINPATH,$(ALLDIRS) $(addprefix $(CEDEV)/,include include/compat)))
HEADERS :=$(subst \;,;,$(HEADERS))
HEADERS :=$(subst \;,;,$(HEADERS))
HEADERS :=$(subst /;,;,$(HEADERS))

# define the C flags used by the Zilog compiler
CFLAGS ?= \
        -noasm -nodebug -nogenprint -keepasm -quiet -optsize -cpu:EZ80F91 -optspeed -noreduceopt -nodebug -nolistinc -nomodsect \
	-stdinc:"$(HEADERS)" -define:_EZ80F91 -define:_EZ80 -define:$(DEBUGMODE)

# these are the linker flags, basically organized to properly set up the environment
LDFLAGS := \
	-i 'range rom $$000000 : $$3FFFFF' \
	-i 'range ram $$D00000 : $$FFFFFF' \
	-i 'range bss $$$(BSSHEAP_LOW) : $$$(BSSHEAP_HIGH)' \
	-i 'symbol __low_bss = bss.base' \
	-i 'symbol __len_bss = bss.length' \
	-i 'symbol __heaptop = bss.high' \
	-i 'symbol __heapbot = bss.top' \
	-i 'symbol __stack = $$$(STACK_HIGH)' \
	-i 'entry $(ENTRY)' \
	-i 'locate header at $$$(INIT_LOC)' \
	-i 'order header,icon,launcher,libs,startup,cleanup,exit,code,data,strsect,text'

# this rule is trigged to build everything
all: dirs $(BINDIR)/$(TARGET8XP)

dirs:
	@echo C CE SDK Version $(VERSION) && \
	$(WINCHKBINDIR) $(MKDIR) $(BINDIR) && \
	$(WINCHKOBJDIR) $(MKDIR) $(OBJDIR)

$(BINDIR)/$(TARGET8XP): $(BINDIR)/$(TARGETBIN)
	@$(CD) $(BINDIR) && \
	$(CV) $(CVFLAGS) $(notdir $<)

$(BINDIR)/$(TARGETBIN): $(OBJECTS) $(LINK_FILES)
	$(LD) $(LDFLAGS) $(CEDEV)/include/fasmg-ez80/ld.fasmg -i 'files $(call NATIVEPATH,$^)' -i 'libs $(LINK_LIBLOAD)' $@

# this rule handles conversion of the icon, if it is ever updated
$(OBJDIR)/$(ICON_ASM): $(ICONPNG)
	@$(ICON_CONV)

$(OBJDIR)/%.src: $(GFXDIR)/%.c $(USERHEADERS)
	@$(CD) $(OBJDIR) && \
	$(CC) $(CFLAGS) $(call WINPATH,$(addprefix $(CURDIR)/,$<))

# these rules compile the source files into object files
$(OBJDIR)/%.src: $(SRCDIR)/%.c $(USERHEADERS)
	@$(CD) $(OBJDIR) && \
	$(CC) $(CFLAGS) $(call WINPATH,$(addprefix $(CURDIR)/,$<))

clean:
	@$(RM) $(call NATIVEPATH,$(BINDIR)/$(TARGETBIN) $(BINDIR)/$(TARGETTYPE) $(BINDIR)/$(TARGETMAP) $(OBJDIR)/$(ICON_ASM) $(OBJDIR)/*.obj $(OBJDIR)/*.src)
	@echo Cleaned build files.

gfx:
	@$(CD) $(GFXDIR) && convpng

version:
	@echo C SDK Version $(VERSION)

.PHONY: all clean version gfx dirs
