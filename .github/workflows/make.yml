name: Win/Mac/Linux

on:
  push:
    branches-ignore:
      - gh-pages
  pull_request:
    branches:
      - master

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{matrix.runs-on}}
    steps:
      - name: Bootstrap Build Environment
        if: runner.os == 'Windows'
        run: "cmake -E echo >> $env:GITHUB_ENV ENV=env:"
      - name: Prepare Build Environment
        run: cmake -E echo >> $${{env.ENV}}GITHUB_PATH ${{github.workspace}}/CEdev/bin
      - name: Prepare Build Environment
        if: runner.os == 'macOS'
        run: cmake -E echo >> $${{env.ENV}}GITHUB_ENV FASMG_PATH=/source/macos/x64
      - name: Prepare Build Environment
        if: runner.os != 'Windows'
        run: cmake -E echo >> $${{env.ENV}}GITHUB_ENV NUL=/dev/null
      - name: Prepare Build Environment
        if: runner.os == 'Windows'
        run: |
          cmake -E echo >> $${{env.ENV}}GITHUB_ENV NUL=nul
          cmake -E echo >> $${{env.ENV}}GITHUB_ENV EXE=.exe

      - name: Download ez80-clang
        id: ez80-clang
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: https://jacobly.com/a/llvm/ez80-clang${{env.EXE}}-${{runner.os}}Release.zip
      - name: Extract ez80-clang
        uses: DuckSoft/extract-7z-action@v1.0
        with:
          pathSource: ${{steps.ez80-clang.outputs.file-path}}
          pathTarget: CEdev/bin

      - name: Download Fasmg Download Page
        id: flatassembler-download
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: https://flatassembler.net/download.php
      - name: Parse Fasmg Download Page
        id: fasmg-url
        uses: QwerMike/xpath-action@v1
        with:
          filename: ${{steps.flatassembler-download.outputs.file-path}}
          expression: //a[starts-with(text(),"flat assembler g ")]/@href
      - name: Extract Fasmg Url
        run: cmake -E echo >> $${{env.ENV}}GITHUB_ENV ${{steps.fasmg-url.outputs.result}}
      - name: Download Fasmg
        id: fasmg
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: https://flatassembler.net/${{env.href}}
      - name: Extract Fasmg
        uses: DuckSoft/extract-7z-action@v1.0
        with:
          pathSource: ${{steps.fasmg.outputs.file-path}}
          pathTarget: fasmg
      - name: Setup Fasmg
        run: cmake -E copy fasmg${{env.FASMG_PATH}}/fasmg${{env.EXE}} CEdev/bin

      - name: Make Binaries Executable
        if: runner.os != 'Windows'
        run: chmod +x CEdev/bin/*
      - name: Test Build Dependencies
        run: |
          ez80-clang --version
          fasmg ${{env.NUL}} ${{env.NUL}}

      - name: Checkout Toolchain
        uses: actions/checkout@v2.3.4
        with:
          path: toolchain
          submodules: recursive
      - name: Build Toolchain
        run: make -j4 -C toolchain V=1
      - name: Install Toolchain
        env:
          PREFIX: ${{github.workspace}}
        run: make -j4 -C toolchain install release release-libs V=1

      - name: Upload CEdev
        uses: actions/upload-artifact@v2
        with:
          name: CEdev-${{runner.os}}
          path: CEdev
      - name: Upload Libraries
        uses: actions/upload-artifact@v2
        with:
          name: clibs
          path: toolchain/clibs.8xg
      - name: Upload Windows Installer
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: installer-${{runner.os}}
          path: toolchain\release\CEdev${{env.EXE}}

  test:
    needs: build
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-latest, macos-latest, windows-latest]
        installer: [CEdev]
        include:
          - runs-on: windows-latest
            installer: installer
    runs-on: ${{matrix.runs-on}}
    steps:
      - name: Bootstrap Test Environment
        if: runner.os == 'Windows'
        run: "cmake -E echo >> $env:GITHUB_ENV ENV=env:"
      - name: Prepare Test Environment
        run: |
          cmake -E echo >> $${{env.ENV}}GITHUB_ENV ROM=84pce_515_53.rom
          cmake -E echo >> $${{env.ENV}}GITHUB_ENV CEDEV=${{github.workspace}}/CEdev
          cmake -E echo >> $${{env.ENV}}GITHUB_PATH ${{github.workspace}}/CEdev/bin
          cmake -E echo >> $${{env.ENV}}GITHUB_PATH ${{github.workspace}}/CEmu/tests/autotester

      - name: Download CEdev
        uses: actions/download-artifact@v2
        with:
          name: ${{matrix.installer}}-${{runner.os}}
          path: ${{env.CEDEV}}
      - name: Install CEdev
        if: matrix.installer == 'installer'
        run: ${{env.CEDEV}}/CEDev${{env.EXE}} /DIR=${{env.CEDEV}} /VERYSILENT /SUPPRESSMSGBOXES /NORESTART

      - name: Download Libraries
        uses: actions/download-artifact@v2
        with:
          name: clibs

      - name: Make Binaries Executable
        if: runner.os != 'Windows'
        run: chmod +x ${{env.CEDEV}}/bin/*
      - name: Build Examples
        run: make -j4 -C ${{env.CEDEV}}/examples V=1

      - name: Checkout CEmu
        uses: actions/checkout@v2.3.4
        with:
          repository: CE-Programming/CEmu
          ref: latest-stable
          path: CEmu
      - name: Build CEmu
        run: make -j4 -C CEmu/core
      - name: Build Autotester CLI
        run: make -j4 -C CEmu/tests/autotester

      - name: Download Secrets
        id: download-secrets
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: https://jacobly.com/CE-Programming/secrets
          location: secrets
      - name: Decrypt Secrets
        env:
          KEY: ${{secrets.SYMMETRIC_KEY_256}}
        run: openssl enc -d -aes-256-cbc -iv d0583d991fcb6c3b05fb8eabc7421fb8 -K "$${{env.ENV}}KEY" -in ${{steps.download-secrets.outputs.file-path}} -out secrets/secrets.7z
      - name: Extract Secrets
        uses: DuckSoft/extract-7z-action@v1.0
        with:
          pathSource: secrets/secrets.7z
          pathTarget: secrets

      - name: Test examples
        if: runner.os != 'Windows'
        env:
          AUTOTESTER_LIBS_GROUP: ${{github.workspace}}/clibs.8xg
          AUTOTESTER_ROM: ${{github.workspace}}/secrets/${{env.ROM}}
        run: |
          failed=0
          find ${{env.CEDEV}}/examples -name autotest.json -print0 | while read -d '' test; do
            cmake -E echo "Launching autotester on $test"
            autotester "$test"
            cmake -E true $((failed += $?))
          done
          exit $failed
      - name: Test examples
        if: runner.os == 'Windows'
        env:
          AUTOTESTER_LIBS_GROUP: ${{github.workspace}}\clibs.8xg
          AUTOTESTER_ROM: ${{github.workspace}}\secrets\${{env.ROM}}
        run: |
          $failed = 0
          foreach ($test in get-childitem "${{env.CEDEV}}\examples" -recurse -include autotest.json) {
            cmake -E echo "Launching autotester on $test"
            autotester "$test"
            $failed += $lastexitcode
          }
          Exit $failed

      - name: Remove Secrets
        if: always()
        run: cmake -E rm -rf secrets

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Bootstrap Documentation Environment
        if: runner.os == 'Windows'
        run: "cmake -E echo >> $env:GITHUB_ENV ENV=env:"
      - name: Prepare Documentation Environment
        if: runner.os == 'Linux'
        run: cmake -E echo >> $${{env.ENV}}GITHUB_PATH $HOME/.local/bin

      - name: Install Documentation Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y doxygen
          pip install sphinx==3.2.1 sphinx_rtd_theme breathe

      - name: Checkout Toolchain
        uses: actions/checkout@v2.3.4
        with:
          persist-credentials: false

      - name: Build Website Documentation
        run: |
          cd docs
          make html
          cd build/html
          touch .nojekyll

      - name: Upload Website Documentation
        if: github.ref == 'refs/heads/master'
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: docs/build/html
          CLEAN: true
